---
import Layout from '../../../layouts/Layout.astro';
import { getLangFromUrl, useTranslations } from '../../../i18n/utils';

export function getStaticPaths() {
  return [
    { params: { lang: undefined } },
    { params: { lang: 'es' } },
    { params: { lang: 'fr' } },
    { params: { lang: 'zh' } }
  ];
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// 使用import.meta.glob静态导入所有语言的工具文件
const enToolsModules = import.meta.glob('../../../content/tools/en/*.md', { eager: true });
const esToolsModules = import.meta.glob('../../../content/tools/es/*.md', { eager: true });
const frToolsModules = import.meta.glob('../../../content/tools/fr/*.md', { eager: true });
const zhToolsModules = import.meta.glob('../../../content/tools/zh/*.md', { eager: true });

// 将模块转换为工具数组
const enTools = Object.values(enToolsModules);
const esTools = Object.values(esToolsModules);
const frTools = Object.values(frToolsModules);
const zhTools = Object.values(zhToolsModules);

// 创建语言到工具数组的映射
const langToolsMap = {
  en: enTools,
  es: esTools,
  fr: frTools,
  zh: zhTools
};

// 获取当前语言的工具文件
let toolFiles = langToolsMap[lang] || enTools;

// 收集所有标签
const allTags = new Set();
toolFiles.forEach(tool => {
  if (tool.frontmatter.tags && Array.isArray(tool.frontmatter.tags)) {
    tool.frontmatter.tags.forEach(tag => allTags.add(tag));
  }
});

// 将标签转换为数组并排序
const tags = Array.from(allTags).sort();

// 计算每个标签的工具数量
const tagCounts = {};
toolFiles.forEach(tool => {
  if (tool.frontmatter.tags && Array.isArray(tool.frontmatter.tags)) {
    tool.frontmatter.tags.forEach(tag => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  }
});
---

<Layout
  title={`${t('tags.title')} - ${t('site.title')}`}
  description={`${t('tags.description')}`}
>
  <div class="max-w-7xl mx-auto">
    <nav class="text-sm mb-6">
      <ol class="flex items-center space-x-2">
        <li>
          <a href={`/${lang === 'en' ? '' : lang}`} class="text-dark-400 hover:text-indigo-400">
            {t('nav.home')}
          </a>
        </li>
        <li class="text-dark-500">/</li>
        <li class="text-dark-200">{t('tags.title')}</li>
      </ol>
    </nav>

    <h1 class="text-4xl font-bold mb-8">
      {t('tags.title')}
    </h1>

    <p class="text-dark-300 mb-8">
      {t('tags.description')}
    </p>

    <div class="flex flex-wrap gap-4 mb-12">
      {tags.map(tag => {
        const tagUrl = lang === 'en' ? `/tags/${encodeURIComponent(tag)}` : `/${lang}/tags/${encodeURIComponent(tag)}`;
        return (
          <a
            href={tagUrl}
            class="bg-dark-700 hover:bg-dark-600 text-dark-200 px-4 py-2 rounded-full transition-colors duration-200 flex items-center"
          >
            <span>{tag}</span>
            <span class="ml-2 bg-dark-600 text-dark-300 text-xs px-2 py-0.5 rounded-full">{tagCounts[tag]}</span>
          </a>
        );
      })}
    </div>
  </div>
</Layout>
