---
import Layout from '@layouts/Layout.astro';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import ToolCard from '@components/ToolCard.astro';

export function getStaticPaths() {
  // 使用import.meta.glob静态导入所有语言的工具文件
  const enToolsModules = import.meta.glob('@content/tools/en/*.md', { eager: true });
  const esToolsModules = import.meta.glob('@content/tools/es/*.md', { eager: true });
  const frToolsModules = import.meta.glob('@content/tools/fr/*.md', { eager: true });
  const zhToolsModules = import.meta.glob('@content/tools/zh/*.md', { eager: true });

  // 将模块转换为工具数组
  const enTools = Object.values(enToolsModules);
  const esTools = Object.values(esToolsModules);
  const frTools = Object.values(frToolsModules);
  const zhTools = Object.values(zhToolsModules);

  // 创建语言到工具数组的映射
  const langToolsMap = {
    en: enTools,
    es: esTools,
    fr: frTools,
    zh: zhTools
  };

  // 为每个语言收集标签
  const langTagsMap: Record<string, string[]> = {};
  
  // 遍历每种语言
  for (const [lang, tools] of Object.entries(langToolsMap)) {
    const langTags = new Set<string>();
    
    // 从当前语言的工具中收集标签
    tools.forEach((tool: any) => {
      if (tool.frontmatter.tags && Array.isArray(tool.frontmatter.tags)) {
        tool.frontmatter.tags.forEach((tag: string) => langTags.add(tag));
      }
    });
    
    // 将当前语言的标签保存到映射中
    langTagsMap[lang] = Array.from(langTags);
  }

  // 为每个标签和语言创建路径
  const paths: { params: { lang: string | undefined; tag: string } }[] = [];

  // 为英文标签创建默认路径（无语言前缀）
  langTagsMap.en.forEach((tag: string) => {
    // 将标签转换为 URL 安全的格式
    const urlTag = tag.toLowerCase().replace(/\s+/g, '-');
    paths.push({ params: { lang: undefined, tag: urlTag } });
  });

  // 为每种语言创建对应的标签路径
  for (const [lang, tags] of Object.entries(langTagsMap)) {
    tags.forEach((tag: string) => {
      // 将标签转换为 URL 安全的格式
      const urlTag = tag.toLowerCase().replace(/\s+/g, '-');
      paths.push({ params: { lang, tag: urlTag } });
    });
  }

  return paths;
}

const { tag } = Astro.params;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// 使用import.meta.glob静态导入所有语言的工具文件
const enToolsModules = import.meta.glob('@content/tools/en/*.md', { eager: true });
const esToolsModules = import.meta.glob('@content/tools/es/*.md', { eager: true });
const frToolsModules = import.meta.glob('@content/tools/fr/*.md', { eager: true });
const zhToolsModules = import.meta.glob('@content/tools/zh/*.md', { eager: true });

// 将模块转换为工具数组
const enTools = Object.values(enToolsModules);
const esTools = Object.values(esToolsModules);
const frTools = Object.values(frToolsModules);
const zhTools = Object.values(zhToolsModules);

// 创建语言到工具数组的映射
const langToolsMap = {
  en: enTools,
  es: esTools,
  fr: frTools,
  zh: zhTools
};

// 获取当前语言的工具文件
let toolFiles = langToolsMap[lang] || enTools;

// 将URL中的标签转换回可能的原始格式
// 注意：这里我们需要考虑标签可能有多种形式，如空格、连字符等

// 检查当前标签是否存在于当前语言的工具中
let tagExists = toolFiles.some((tool: any) => {
  if (tool.frontmatter.tags && Array.isArray(tool.frontmatter.tags)) {
    return tool.frontmatter.tags.some((toolTag: string) => {
      const urlToolTag = toolTag.toLowerCase().replace(/\s+/g, '-');
      return urlToolTag === tag;
    });
  }
  return false;
});

// 如果标签不存在，重定向到标签列表页
if (!tagExists) {
  return Astro.redirect(`/${lang === 'en' ? '' : lang}/tags`);
}

// 筛选包含当前标签的工具
const tagTools = toolFiles
  .filter((tool: any) => {
    if (!tool.frontmatter.tags || !Array.isArray(tool.frontmatter.tags)) {
      return false;
    }

    // 检查工具的标签是否匹配当前 URL 标签
    return tool.frontmatter.tags.some((toolTag: string) => {
      // 将工具标签转换为 URL 安全的格式进行比较
      const urlToolTag = toolTag.toLowerCase().replace(/\s+/g, '-');
      return urlToolTag === tag;
    });
  })
  .map((tool: any) => ({
    id: tool.frontmatter.id,
    name: tool.frontmatter.name,
    description: tool.frontmatter.description,
    category: tool.frontmatter.category,
    rating: tool.frontmatter.rating,
    reviews: tool.frontmatter.reviews,
    website: tool.frontmatter.website,
    icon: tool.frontmatter.icon,
    updatedAt: tool.frontmatter.updatedAt || '2000-01-01' // 如果没有updatedAt字段，使用默认日期
  }))
  // 按updatedAt字段排序，最新的在前面
  .sort((a, b) => {
    const dateA = new Date(a.updatedAt);
    const dateB = new Date(b.updatedAt);
    return dateB.getTime() - dateA.getTime();
  });
---

<Layout
  title={`${tag} - ${t('tags.title')} - ${t('site.title')}`}
  description={`${t('tags.tagDescription').replace('{tag}', tag)}`}
>
  <div class="max-w-7xl mx-auto">
    <nav class="text-sm mb-6">
      <ol class="flex items-center space-x-2">
        <li>
          <a href={`/${lang === 'en' ? '' : lang}`} class="text-dark-400 hover:text-indigo-400">
            {t('nav.home')}
          </a>
        </li>
        <li class="text-dark-500">/</li>
        <li>
          <a href={`/${lang === 'en' ? '' : lang}/tags`} class="text-dark-400 hover:text-indigo-400">
            {t('tags.title')}
          </a>
        </li>
        <li class="text-dark-500">/</li>
        <li class="text-dark-200">{tag}</li>
      </ol>
    </nav>

    <h1 class="text-4xl font-bold mb-8">
      {tag}
    </h1>

    <p class="text-dark-300 mb-8">
      {t('tags.tagDescription').replace('{tag}', tag)}
    </p>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">
      {tagTools.length > 0 ? (
        tagTools.map(tool => (
          <ToolCard tool={tool} />
        ))
      ) : (
        <p class="text-dark-400 col-span-full text-center py-8">{t('tags.no-tools')}</p>
      )}
    </div>
  </div>
</Layout>
